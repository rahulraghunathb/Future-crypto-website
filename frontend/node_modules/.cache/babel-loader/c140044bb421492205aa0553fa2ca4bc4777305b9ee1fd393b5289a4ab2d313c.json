{"ast":null,"code":"import logger from \"../modules/logger/index.js\";\nvar name = \"webpack-dev-server\"; // default level is set on the client side, so it does not need\n// to be set by the CLI or API\n\nvar defaultLevel = \"info\"; // options new options, merge with old options\n\n/**\r\n * @param {false | true | \"none\" | \"error\" | \"warn\" | \"info\" | \"log\" | \"verbose\"} level\r\n * @returns {void}\r\n */\n\nfunction setLogLevel(level) {\n  logger.configureDefaultLogger({\n    level: level\n  });\n}\nsetLogLevel(defaultLevel);\nvar log = logger.getLogger(name);\nexport { log, setLogLevel };","map":{"version":3,"names":["logger","name","defaultLevel","setLogLevel","level","configureDefaultLogger","log","getLogger"],"sources":["C:/Users/akhil/OneDrive/Desktop/crypto-login/crypto_frontend/Future-crypto-website/frontend/node_modules/webpack-dev-server/client/utils/log.js"],"sourcesContent":["import logger from \"../modules/logger/index.js\";\r\nvar name = \"webpack-dev-server\"; // default level is set on the client side, so it does not need\r\n// to be set by the CLI or API\r\n\r\nvar defaultLevel = \"info\"; // options new options, merge with old options\r\n\r\n/**\r\n * @param {false | true | \"none\" | \"error\" | \"warn\" | \"info\" | \"log\" | \"verbose\"} level\r\n * @returns {void}\r\n */\r\n\r\nfunction setLogLevel(level) {\r\n  logger.configureDefaultLogger({\r\n    level: level\r\n  });\r\n}\r\n\r\nsetLogLevel(defaultLevel);\r\nvar log = logger.getLogger(name);\r\nexport { log, setLogLevel };"],"mappings":"AAAA,OAAOA,MAAM,MAAM,4BAA4B;AAC/C,IAAIC,IAAI,GAAG,oBAAoB,CAAC,CAAC;AACjC;;AAEA,IAAIC,YAAY,GAAG,MAAM,CAAC,CAAC;;AAE3B;AACA;AACA;AACA;;AAEA,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC1BJ,MAAM,CAACK,sBAAsB,CAAC;IAC5BD,KAAK,EAAEA;EACT,CAAC,CAAC;AACJ;AAEAD,WAAW,CAACD,YAAY,CAAC;AACzB,IAAII,GAAG,GAAGN,MAAM,CAACO,SAAS,CAACN,IAAI,CAAC;AAChC,SAASK,GAAG,EAAEH,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}